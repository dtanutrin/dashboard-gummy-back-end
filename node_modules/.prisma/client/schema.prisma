generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Area {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  dashboards   Dashboard[]
  userAccesses UserAreaAccess[]

  @@map("Areas")
}

model User {
  id                Int                   @id @default(autoincrement())
  email             String                @unique
  passwordHash      String                @map("password_hash")
  role              String                @default("User")
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")
  name              String?
  resetToken        String?               @map("reset_token")
  resetTokenExpiry  DateTime?             @map("reset_token_expiry")
  areaAccesses      UserAreaAccess[]
  dashboardAccesses UserDashboardAccess[]

  @@map("Users")
}

model Dashboard {
  id           Int                   @id @default(autoincrement())
  name         String
  url          String
  areaId       Int                   @map("area_id")
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  information  String?
  area         Area                  @relation(fields: [areaId], references: [id], onDelete: Cascade)
  userAccesses UserDashboardAccess[]

  @@index([areaId])
  @@map("Dashboards")
}

model UserAreaAccess {
  userId Int  @map("user_id")
  areaId Int  @map("area_id")
  area   Area @relation(fields: [areaId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, areaId])
  @@index([userId])
  @@index([areaId])
  @@map("UserAreaAccess")
}

model UserDashboardAccess {
  userId      Int       @map("user_id")
  dashboardId Int       @map("dashboard_id")
  grantedAt   DateTime  @default(now()) @map("granted_at")
  grantedBy   Int?      @map("granted_by")
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, dashboardId])
  @@index([userId])
  @@index([dashboardId])
  @@map("UserDashboardAccess")
}

// MODELO SEGURO - SEM RELACIONAMENTOS FK INICIALMENTE
model AuditLog {
  id         Int      @id @default(autoincrement())
  action     String // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, ACCESS_GRANTED, ACCESS_REVOKED
  entityType String // USER, DASHBOARD, AREA, AUTH, ACCESS
  entityId   Int? // ID da entidade afetada
  userId     Int? // Referência simples (sem FK)
  adminId    Int? // Admin que executou
  level      String   @default("info") // info, warn, error, debug
  details    Json? // Detalhes da ação
  ipAddress  String? // IP da requisição
  userAgent  String? // User-Agent
  timestamp  DateTime @default(now())

  // Índices para performance
  @@index([timestamp])
  @@index([userId])
  @@index([entityType])
  @@index([action])
  @@map("AuditLogs")
}
